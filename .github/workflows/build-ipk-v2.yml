name: Build HomeProxy IPK v2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      target:
        description: 'Target platform'
        required: true
        default: 'mediatek/filogic'
        type: choice
        options:
          - 'mediatek/filogic'
          - 'rockchip/armv8'
          - 'bcm27xx/bcm2711'
          - 'armvirt/64'
      version:
        description: 'OpenWrt version'
        required: true
        default: '23.05.3'

env:
  OPENWRT_VERSION: ${{ github.event.inputs.version || '23.05.3' }}
  TARGET_PLATFORM: ${{ github.event.inputs.target || 'mediatek/filogic' }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
      
    - name: Setup build environment
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          clang \
          flex \
          bison \
          g++ \
          gawk \
          gcc-multilib \
          g++-multilib \
          gettext \
          git \
          libncurses5-dev \
          libssl-dev \
          python3-distutils \
          python3-setuptools \
          python3-dev \
          rsync \
          unzip \
          zlib1g-dev \
          file \
          wget \
          curl \
          subversion \
          time \
          xz-utils
          
    - name: Download OpenWrt source
      run: |
        git clone --depth 1 --branch v${{ env.OPENWRT_VERSION }} \
          https://github.com/openwrt/openwrt.git openwrt
          
    - name: Update feeds
      working-directory: openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Copy package files
      run: |
        mkdir -p openwrt/package/luci-app-homeproxy
        cp -r Makefile htdocs po root openwrt/package/luci-app-homeproxy/
        
    - name: Configure build
      working-directory: openwrt
      run: |
        make defconfig
        echo "CONFIG_TARGET_$(echo ${{ env.TARGET_PLATFORM }} | tr '/' '_')=y" >> .config
        echo "CONFIG_PACKAGE_luci-app-homeproxy=m" >> .config
        make defconfig
        
    - name: Build package
      working-directory: openwrt
      run: |
        make package/luci-app-homeproxy/compile V=s
        
    - name: Collect artifacts
      run: |
        mkdir -p artifacts
        find openwrt/bin/ -name "*luci-app-homeproxy*.ipk" -exec cp {} artifacts/ \;
        ls -la artifacts/
        echo "Checking file content:"
        file artifacts/*
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: homeproxy-ipk-${{ env.TARGET_PLATFORM }}-${{ env.OPENWRT_VERSION }}
        path: artifacts/*.ipk
        retention-days: 30
        
    - name: Create release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: "HomeProxy with Clash UI v${{ github.run_number }}"
        body: |
          ## üì¶ HomeProxy IPK with Clash UI Integration
          
          ### üéØ Target Platform: ${{ env.TARGET_PLATFORM }}
          ### üîß OpenWrt Version: ${{ env.OPENWRT_VERSION }}
          
          ### ‚ú® Features
          - Complete Clash API support
          - Web Dashboard integration
          - Advanced routing rules
          - DNS filtering
          - Access control
          
          ### üìã Installation
          ```bash
          opkg install luci-app-homeproxy_*.ipk
          /etc/init.d/uhttpd restart
          ```
          
          ### üåê Access
          After installation, visit: `http://router-ip/cgi-bin/luci/admin/services/homeproxy`
        files: artifacts/*.ipk
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
